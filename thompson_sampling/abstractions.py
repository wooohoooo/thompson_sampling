# AUTOGENERATED! DO NOT EDIT! File to edit: 00_abstractions.ipynb (unless otherwise specified).

__all__ = ['AbstractNoncontextualMAB', 'AbstractContextualMAB', 'AbstractSolver', 'AbstractContextualSolver']

# Cell
import numpy as np

class AbstractNoncontextualMAB(object):
    def get_probaility(self, arm):
        pass

    def get_reward(self, arm):
        pass

    def get_best_arm(self):
        pass


class AbstractContextualMAB(object):

    def __init__(self, theta, noise, linear=False):

        self.theta = theta
        self.noise = noise
        self.num_arms = len(theta)

        if linear:
            self. activation = lambda x: x
        else:
            self.activation = lambda x: 1 / (1 + np.exp(-x))

    def get_probaility(self, arm, context):
        pass

    def get_reward(self, arm, context):
        pass

    def get_best_arm(self, context):
        pass

# Cell
class AbstractSolver(object):
    def choose_arm(self):
        """choose an arm to play according to internal policy"""
        raise NotImplementedError

    def update(self, arm, reward):
        """ update internal policy to reflect changed knowledge"""
        raise NotImplementedError


# Cell
class AbstractContextualSolver(object):
    def __init__(self, model_type, num_arms, num_context, model_params={}):
        self.model_list = [model_type(num_context, **model_params) for x in range(num_arms)]
        self.num_arms = num_arms
        self.num_context = num_context


    def choose_arm(self,context):
        """choose an arm to play according to internal policy"""
        raise NotImplementedError

    def update(self, arm, context, reward):
        """ update internal policy to reflect changed knowledge"""
        raise NotImplementedError